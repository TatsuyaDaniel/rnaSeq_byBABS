#######################################
# Example MultiQC Configuration File
#######################################

# This file can be saved either in the MultiQC installation
# directory, or as ~/.multiqc_config.yaml

# Configuration settings are taken from the following locations, in order:
# - Hardcoded in MultiQC (multiqc/utils/config.py)
# - <installation_dir>/multiqc_config.yaml
# - ~/.multiqc_config.yaml
# - Command line options

# Note that all of the values below are set to the MultiQC defaults.
# It's recommended that you delete any that you don't need.

---
# Title to use for the report.
title: null

# Prepend sample names with their directory. Useful if analysing the
# sample samples with different parameters.
prepend_dirs: False

# Default output filenames
output_fn_name: multiqc_report.html
data_dir_name: multiqc_data

# Whether to create the parsed data directory in addition to the report
make_data_dir: True

# Cleaning options for sample names. Typically, sample names are detected
# from an input filename. If any of these strings are found, they and any
# text to their right will be discarded.
# For example - file1.fq.gz_trimmed.bam_deduplicated_fastqc.zip
# would be cleaned to 'file1'
# Two options here - fn_clean_exts will replace the defaults,
# extra_fn_clean_exts will append to the defaults
extra_fn_clean_exts:
    - .gz
    - .fastq
    - .fq
    - .bam
    - .sam
    - .sra
    - _tophat
    - _star_aligned
    - _fastqc
    - type: replace
      pattern: '.sorted'
    - .STAR
#    - type: regex
#      pattern: '_.*'

# Ignore these files / directories / paths when searching for logs
fn_ignore_files:
    - .DS_Store
    - .bam
fn_ignore_dirs:
    - annoying_dirname
    - fastq
fn_ignore_paths:
    - '*/path/to/*_files/'

# Ignore files larger than this when searcing for logs (bytes)
log_filesize_limit: 15000000

# MultiQC skips a couple of debug messages when searching files as the
# log can get very verbose otherwise. Re-enable here to help debugging.
report_readerrors: False
report_imgskips: False

# Opt-out of remotely checking that you're running the latest version
no_version_check: False

# How to plot graphs. Different templates can override these settings, but
# the default template can use interactive plots (Javascript using HighCharts)
# or flat plots (images, using MatPlotLib). With interactive plots, the report
# can prevent automatically rendering all graphs if there are lots of samples
# to prevent the browser being locked up when the report opens.
plots_force_flat: False          # Try to use only flat image graphs
plots_force_interactive: True   # Try to use only interactive javascript graphs
plots_flat_numseries: 100        # If neither of the above, use flat if > this number of datasets
num_datasets_plot_limit: 200      # If interactive, don't plot on load if > this number of datasets
max_table_rows: 500              # Swap tables for a beeswarm plot above this

# Overwrite module filename search patterns. See multiqc/utils/search_patterns.yaml
# for the defaults. Remove a default by setting it to null.
sp:
    star:
        fn: '*Log.final.out'
    trimmomatic:
        contents: 'Trimmomatic'


# Specify a custom logo to add to reports (uncomment to use)
custom_logo: null         # '/path/to/logo.png'
custom_logo_url: null     # 'https://www.example.com'
custom_logo_title: null   # 'Our Institute Name'
subtitle: null            # Grey text below title
intro_text: null          # Set to False to remove, or your own text

# Add generic information to the top of reports
report_header_info:
    - Example Config:: 'This is arbitrary'
    - Another field:: 'Loaded from <code>multiqc_config_example.yaml</code>'
    - Something different:: 'You can put any key-value pairs here'
    - Want to know more?: 'See the <a href="http://multiqc.info/docs" target="_blank">MultiQC docs</a>'

# Module order in report
top_modules:
  - 'picard'
  - 'rseqc'
  - 'detectable'
  - 'countdist'
  - 'rrna'
  - 'cutadapt'
  - 'mga'
  - 'fastqc'
  - 'rnaseqc'
  
# Overwrite the defaults of which table columns are visible by default
table_columns_visible:
    FastQC:
        percent_fails: False
        total_sequences: True
        percent_duplicates: False
        percent_gc: False
        avg_sequence_length: True
        

# custom data : MGA (multiple genomic alignment/contaminant screen)
custom_data:
    rnaseqc:
      sp:
        fn: 'metrics.tsv'
      id: 'rnaseqc'
      file_format: 'tsv'
      section_name: 'RNASeQC'
      description: 'The results table generated by RNASeQC (Columns with data already presented here #ave been removed)'
      plot_type: 'table'
      pconfig:
        id: 'rnaseqc'
        title: 'RNASeQC Results Table'
        namespace: 'rnaseqc'
    mga:
      sp:
        fn: 'mga*'
      id: 'mga'
      file_format: 'tsv'
      section_name: 'Contaminant Screen'
      description: 'This plot shows the total of sampled reads aligning to each genome/organism'
      plot_type: 'bargraph'
      pconfig:
        id: 'contaminant_screen'
        title: 'Organism Specific Library Fraction'
        ylab: 'Library Count'
    rrna:
      sp:
        fn: 'rRNA.percentage*'
      id: 'rrna'
      file_format: 'tsv'
      namespace: 'rrna'
      section_name: 'rRNA Library Percentage'
      description: 'This barplot shows the percentage of rRNA present in each library. The counts are in bases covered'
      plot_type: 'bargraph'
      pconfig:
        title: 'rRNA Library Percentage'
        ylab: 'Percent of library'
        cpswitch_c_active: 'True'
    mbscreen:
      sp:
        fn: 'molbio.seq.counts*'
      id: 'mbscreen'
      file_format: 'tsv'
      namespace: 'mbscreen'
      section_name: 'Molecular Biology Sequences'
      description: 'This barplot shows the library counts for the molecular biology specific sequences' 
      plot_type: 'bargraph'
      pconfig:
        title: 'Molecular Biology Sequence Counts'
        ylab: 'counts'
